// $Id$
//
// Copyright (C) 2005 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

// Definition of inline template functions

//#include "managed_pointer.ih"

// Custom includes

#define prefix__ inline
///////////////////////////////cti.p///////////////////////////////////////

template <typename T>
prefix__ satcom::managed_pointer::slave_ptr<T>::slave_ptr()
{}

template <typename T>
template <typename U>
prefix__  satcom::managed_pointer::slave_ptr<T>::slave_ptr(U* p)
    : p_ (p)
{}

template <typename T>
template <typename U>
prefix__ satcom::managed_pointer::slave_ptr<T>::
slave_ptr(slave_ptr<U> const & other)
    : p_ (other.p_)
{}

template <typename T>
prefix__ typename satcom::managed_pointer::slave_ptr<T>::reference
satcom::managed_pointer::slave_ptr<T>::operator*()
        const
{
    return *p_;
}

template <typename T>
prefix__ typename satcom::managed_pointer::slave_ptr<T>::pointer
satcom::managed_pointer::slave_ptr<T>::operator->()
        const
{
    return p_;
}

template <typename T>
prefix__ typename satcom::managed_pointer::slave_ptr<T>::pointer
satcom::managed_pointer::slave_ptr<T>::get()
        const
{
    return p_;
}

template <typename T>
prefix__ satcom::managed_pointer::slave_ptr<T>::operator bool()
        const
{
    return p_ != 0;
}

template <typename T>
prefix__ bool satcom::managed_pointer::slave_ptr<T>::operator!()
        const
{
    return p_ == 0;
}

template <typename T, typename U>
prefix__ satcom::managed_pointer::slave_ptr<T>
satcom::managed_pointer::static_pointer_cast(slave_ptr<U> const & p)
{
    return slave_ptr<T>(static_cast<T>(p.get));
}

template <typename T, typename U>
prefix__ satcom::managed_pointer::slave_ptr<T>
satcom::managed_pointer::const_pointer_cast(slave_ptr<U> const & p)
{
    return slave_ptr<T>(const_cast<T>(p.get));
}

template <typename T, typename U>
prefix__ satcom::managed_pointer::slave_ptr<T>
satcom::managed_pointer::dynamic_pointer_cast(slave_ptr<U> const & p)
{
    return slave_ptr<T>(dynamic_cast<T>(p.get));
}

template <typename T>
prefix__ typename satcom::managed_pointer::slave_ptr<T>::pointer
satcom::managed_pointer::get_pointer(slave_ptr<T> const & p)
{}

template <typename E, typename T, typename U>
prefix__ std::basic_ostream<E,T>&
satcom::managed_pointer::operator<<(std::basic_ostream<E,T>& os,
                                    slave_ptr<U> const & p)
{
    os << p.get();
    return os;
}

///////////////////////////////////////////////////////////////////////////
// satcom::managed_pointer::intrusive_refcount

template <class T>
static void intrusive_ptr_add_ref_x(T* p, const satcom::managed_pointer::intrusive_refcount*)
{
    p->inc_ref();
}

template <class T>
static void intrusive_ptr_release_x(T* p, const satcom::managed_pointer::intrusive_refcount*)
{
    if (p->dec_ref())
        delete p;
}

template <class T>
prefix__ void satcom::managed_pointer::intrusive_ptr_add_ref(T* p)
{
    intrusive_ptr_add_ref_x (p,p);
}

template <class T>
prefix__ void satcom::managed_pointer::intrusive_ptr_release(T* p)
{
    intrusive_ptr_release_x (p,p);
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix__


// Local Variables:
// mode: c++
// c-file-style: "satcom"
// End:
