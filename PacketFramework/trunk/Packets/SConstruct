import sys, os, os.path, glob
satscons = os.getcwd()
while satscons and not os.path.isdir(os.path.join(satscons,"satscons")): satscons = os.path.dirname(satscons)
if not satscons: print "satscons directory not found"; Exit(1)
satscons = os.path.join(satscons,"satscons")
sys.path.append(satscons)

opts = Options('SConfig')
opts.Add('CXX', 'C++ compiler to use', 'g++')
opts.Add('BOOST_INCLUDES', 'Boost include directory', '')
opts.Add('BOOST_VARIANT', 'The boost variant to use', '-gcc-gdp')
opts.Add('BOOST_LIBDIR', 'The directory of the boost libraries', '')
opts.Add('STLPORT_INCLUDES', 'STLport include directory', '')
opts.Add('STLPORT_LIB', 'Name of the stlport library or empty to not use stlport', '')
opts.Add('STLPORT_LIBDIR', 'The directory of the stlport libraries','')
opts.Add(BoolOption('final','Enable optimization',0))
env = Environment(options=opts)
Help(opts.GenerateHelpText(env))
conf = env.Configure()

conf.env.Tool('Doxygen', [satscons])
conf.env.Tool('BoostUnitTests', [satscons])

conf.env['STLPORT_DEBUGLIB'] = ''
if conf.env['STLPORT_LIB']:
    conf.env['STLPORT_DEBUGLIB'] = conf.env['STLPORT_LIB'] + '_stldebug'

conf.env['BOOSTTESTLIB'] = 'libboost_unit_test_framework' + env['BOOST_VARIANT']

conf.env.Append(
    LIBPATH = [ '$BOOST_LIBDIR', '$STLPORT_LIBDIR' ],
    CPPPATH = [ '$BOOST_INCLUDES', '$STLPORT_INCLUDES' ]
)

if conf.env['final'] and conf.env['STLPORT_LIB']:
    conf.env.Append(LIBS = '$STLPORT_LIB' )
else:
    conf.env.Append(LIBS =  '$STLPORT_DEBUGLIB', CPPDEFINES = '_STLP_DEBUG' )
    

###########################################################################

conf.env.Append(
    CXXFLAGS   = [ '-Wall', '-Woverloaded-virtual', '-Wno-long-long',
                   '-pedantic', '-ansi' ],
    CPPPATH    = [ '#' ],
    CPPDEFINES = [ ],
    LIBS       = [ ]
)

if conf.env['final']:
    conf.env.Append(
        CXXFLAGS = [ '-O3' ]
    )
else:
    conf.env.Append(
        CXXFLAGS = [ '-O0', '-g', '-fno-inline' ],
        LINKFLAGS = [ '-g' ]
    )

###########################################################################

env = conf.Finish()

testSources = glob.glob("*.test.cc")
sources = [ x for x in glob.glob("*.cc") if x not in testSources ]

###########################################################################

objects = env.Object( sources )

Default(env.BoostUnitTests(
    target = 'test',
    source = sources,
    test_sources = testSources,
))

env.Doxygen(
    target = 'doc',
    source = sources
)

all = env.Alias('all')
env.Clean(all, [ '.sconsign' ] + glob.glob("*~"))
env.Depends(all, '.')
