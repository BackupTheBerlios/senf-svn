// $Id$
//
// Copyright (C) 2006 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

#if !BOOST_PP_IS_ITERATING

// Custom includes
#include <boost/preprocessor/iteration/iterate.hpp>
#include <boost/preprocessor/enum.hpp>
#include <boost/preprocessor/cat.hpp>

#else
//////////////////////////////mpp.p////////////////////////////////////////

#if BOOST_PP_ITERATION_DEPTH()==1 && BOOST_PP_ITERATION_FLAGS()==1
///////////////////////////////////////////////////////////////////////////
// Packet::reinterpret member template declaration

// pkARG := An const & an
#define pkARG(z,n,data) BOOST_PP_CAT(A,n) const & BOOST_PP_CAT(a,n)

template < class OtherPacket, BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), class A) >
typename ptr_t<OtherPacket>::ptr reinterpret( BOOST_PP_ENUM( BOOST_PP_ITERATION(), pkARG, ) );

#undef pkARG

#elif BOOST_PP_ITERATION_DEPTH()==1 && BOOST_PP_ITERATION_FLAGS()==2
///////////////////////////////////////////////////////////////////////////
// Packet::reinterpret implementation

// pkARG := An const & an
#define pkARG(z,n,data) BOOST_PP_CAT(A,n) const & BOOST_PP_CAT(a,n)

template <class OtherPacket, BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), class A) >
prefix_ typename satcom::pkf::Packet::ptr_t<OtherPacket>::ptr
satcom::pkf::Packet::reinterpret( BOOST_PP_ENUM( BOOST_PP_ITERATION(), pkARG, ) )
{
    typename ptr_t<OtherPacket>::ptr p (
        new OtherPacket( inplace_wrapper(this->begin_), inplace_wrapper(this->end_),
                         BOOST_PP_ENUM_PARAMS( BOOST_PP_ITERATION(), a ) ),
        false);
    this->replaceInterpreter(p.get());
    return p;
}

#undef pkARG

#elif BOOST_PP_ITERATION_DEPTH()==1 && BOOST_PP_ITERATION_FLAGS()==3
///////////////////////////////////////////////////////////////////////////
// Packet::registerInterpreter member template declaration

// pkARG := An const & an
#define pkARG(z,n,data) BOOST_PP_CAT(A,n) const & BOOST_PP_CAT(a,n)

template < class OtherPacket, BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), class A) >
typename ptr_t<OtherPacket>::ptr registerInterpreter(
    raw_container::iterator begin, raw_container::iterator end,
    BOOST_PP_ENUM( BOOST_PP_ITERATION(), pkARG, ) ) const;

#undef pkARG

#elif BOOST_PP_ITERATION_DEPTH()==1 && BOOST_PP_ITERATION_FLAGS()==4
///////////////////////////////////////////////////////////////////////////
// Packet::registerIterpreter implementation


// pkARG := An const & an
#define pkARG(z,n,data) BOOST_PP_CAT(A,n) const & BOOST_PP_CAT(a,n)

template <class OtherPacket, BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), class A) >
prefix_ typename satcom::pkf::Packet::ptr_t<OtherPacket>::ptr
satcom::pkf::Packet::registerInterpreter(raw_container::iterator begin,
                                         raw_container::iterator end,
                                         BOOST_PP_ENUM( BOOST_PP_ITERATION(), pkARG, ) )
    const
{
    typename ptr_t<OtherPacket>::ptr p (
        new OtherPacket( inplace_wrapper(begin-impl_->data_.begin()),
                         inplace_wrapper(end-impl_->data_.begin()),
                         BOOST_PP_ENUM_PARAMS( BOOST_PP_ITERATION(), a) ),
        false);
    this->registerInterpreter(p.get());
    return p;
}

#undef pkARG

#endif

//////////////////////////////mpp.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// c-file-style: "satcom"
// End:
