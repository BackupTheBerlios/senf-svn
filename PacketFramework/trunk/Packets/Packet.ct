// $Id$
//
// Copyright (C) 2006 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

// Definition of non-inline template functions

#include "Packet.ih"

// Custom includes
#include <algorithm>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class OtherPacket>
prefix_ typename satcom::pkf::Packet::ptr_t<OtherPacket>::ptr satcom::pkf::Packet::reinterpret()
{
    // THIS INVALIDATES this !!!!!!!
    typename ptr_t<OtherPacket>::ptr p
        (new OtherPacket(inplace_wrapper<&Packet::i_replaceInterpreter>(this->begin_, this), 
                         inplace_wrapper<&Packet::i_replaceInterpreter>(this->end_)), 
         false);
    return p;
}

#define BOOST_PP_ITERATION_PARAMS_1 (4, (1, 9, "Packet.mpp", 2))
#include BOOST_PP_ITERATE()

template <class OtherPacket>
prefix_ typename satcom::pkf::Packet::ptr_t<OtherPacket>::ptr
satcom::pkf::Packet::registerInterpreter(raw_container::iterator begin,
                                         raw_container::iterator end)
    const
{
    typename ptr_t<OtherPacket>::ptr p (
        new OtherPacket( inplace_wrapper<&Packet::i_registerInterpreter>(begin-impl_->data_.begin(), 
                                                                         const_cast<Packet*>(this)),
                         inplace_wrapper<&Packet::i_registerInterpreter>(end-impl_->data_.begin())),
        false);
    return p;
}

#define BOOST_PP_ITERATION_PARAMS_1 (4, (1, 9, "Packet.mpp", 4))
#include BOOST_PP_ITERATE()

// This constructor is called to construct a completely new Packet
template <class InputIterator>
prefix_ satcom::pkf::Packet::Packet(InputIterator begin, InputIterator end)
    : impl_(0), begin_(), end_(), self_(),
      parsed_(false), refcount_(1)
{
    SATCOM_PKF_REFC_MSG("] Packet::Packet (" << this << "): refcount_ = 1\n");
    boost::intrusive_ptr<impl::PacketImpl> impl (new impl::PacketImpl(begin,end), false);
    this->begin_ = 0;
    this->end_ = impl->data_.size();
    // This increments the PacketImpl refcount ...
    impl->appendInterpreter(this);
}

template <class OtherPacket>
prefix_ typename satcom::pkf::Packet::ptr_t<OtherPacket>::ptr satcom::pkf::Packet::find_next()
    const
{
    ptr p (next());
    while (p && !p->is<OtherPacket>())
        p = p->next();
    return p->as<OtherPacket>();
}

template <class OtherPacket>
prefix_ typename satcom::pkf::Packet::ptr_t<OtherPacket>::ptr satcom::pkf::Packet::find_prev()
    const
{
    ptr p (prev());
    while (p && !p->is<OtherPacket>())
        p = p->prev();
    return p->as<OtherPacket>();
}

template <class OtherPacket>
prefix_ typename satcom::pkf::Packet::ptr_t<OtherPacket>::ptr satcom::pkf::Packet::get_next()
    const
{
    typename ptr_t<OtherPacket>::ptr p (find_next<OtherPacket>());
    BOOST_ASSERT(p);
    return p;
}

template <class OtherPacket>
prefix_ typename satcom::pkf::Packet::ptr_t<OtherPacket>::ptr satcom::pkf::Packet::get_prev()
    const
{
    typename ptr_t<OtherPacket>::ptr p (find_prev<OtherPacket>());
    BOOST_ASSERT(p);
    return p;
}

template <class InputIterator>
prefix_ void satcom::pkf::Packet::insert(iterator pos, InputIterator f, InputIterator l)
{
    size_type index(pos-impl_->data_.begin());
    size_type sz (impl_->data_.size());
    impl_->data_.insert(pos,f,l);
    impl_->updateIterators(index,impl_->data_.size()-sz);
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// c-file-style: "satcom"
// End:
