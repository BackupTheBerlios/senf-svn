// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief PacketParser inline template implementation */

#include "PacketParser.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::PacketParserBase

template <class Parser>
prefix_ Parser senf::PacketParserBase::parse(data_iterator i)
    const
{
    return Parser(i,state());
}

template <class Parser>
prefix_ Parser senf::PacketParserBase::parse(size_type n)
    const
{
    return Parser(boost::next(i(),n),state());
}

prefix_ void senf::PacketParserBase::defaultInit()
    const
{}

///////////////////////////////////////////////////////////////////////////
// namespace members

template <class Parser>
prefix_ senf::PacketParserBase::size_type senf::bytes(Parser p)
{
    return detail::packetParserSize(p,0);
}

template <class Parser>
prefix_ senf::PacketParserBase::size_type
senf::detail::packetParserSize(Parser p, int, Parser_TakeNum<Parser::fixed_bytes> *)
{
    return Parser::fixed_bytes;
}

template <class Parser>
prefix_ senf::PacketParserBase::size_type senf::detail::packetParserSize(Parser p, ...)
{
    return p.bytes();
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
